// src/utils/contentLoader.js
/**
 * Utility functions for loading Markdown content dynamically.
 * This version fetches a manifest file generated by the CMS to get the list of content,
 * which avoids build errors and keeps the content dynamic.
 */

/**
 * Parses the frontmatter from a Markdown string.
 * Assumes frontmatter is enclosed between '---' at the beginning of the file.
 * @param {string} markdown - The raw Markdown content.
 * @returns {{frontmatter: object, body: string}}
 */
function parseMarkdown(markdown) {
  const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
  const match = frontmatterRegex.exec(markdown);

  if (!match) {
    return { frontmatter: {}, body: markdown };
  }

  const frontmatterStr = match[1];
  const body = markdown.substring(match[0].length).trim();
  const frontmatter = {};

  frontmatterStr.split("\n").forEach((line) => {
    const parts = line.split(":");
    if (parts.length >= 2) {
      const key = parts[0].trim();
      let value = parts.slice(1).join(":").trim();
      // Try to parse numbers, booleans, and arrays from the string
      if (value.startsWith('"') && value.endsWith('"')) {
        value = value.slice(1, -1);
      } else if (!isNaN(Number(value)) && value.trim() !== "") {
        value = Number(value);
      } else if (value.toLowerCase() === "true") {
        value = true;
      } else if (value.toLowerCase() === "false") {
        value = false;
      } else if (value.startsWith("[") && value.endsWith("]")) {
        try {
          value = JSON.parse(value.replace(/'/g, '"'));
        } catch (e) {
          // If parsing fails, keep it as a string
          console.error(`Could not parse array for key ${key}: ${value}`, e);
        }
      }
      frontmatter[key] = value;
    }
  });

  return { frontmatter, body };
}

/**
 * Fetches and parses all articles from the /src/data/articles directory
 * by first loading a manifest file.
 * @returns {Promise<Array<{id: string, ...frontmatter, content: string}>>}
 */
export async function loadArticles() {
  try {
    // We assume the CMS can generate a manifest file with a list of filenames.
    // This manifest file needs to be accessible via the static server.
    const manifestResponse = await fetch(
      "/src/data/articles/articles-manifest.json"
    );
    if (!manifestResponse.ok) {
      throw new Error("Failed to fetch articles manifest file.");
    }
    const manifest = await manifestResponse.json();
    const articleFiles = manifest.files;

    const articles = await Promise.all(
      articleFiles.map(async (fileName) => {
        try {
          const response = await fetch(`/src/data/articles/${fileName}`);
          if (!response.ok) {
            throw new Error(`Failed to fetch article: ${fileName}`);
          }
          const markdown = await response.text();
          const { frontmatter, body } = parseMarkdown(markdown);
          return {
            id: fileName.replace(".md", ""),
            ...frontmatter,
            content: body,
          };
        } catch (error) {
          console.error(`Error loading article ${fileName}:`, error);
          return null;
        }
      })
    );
    return articles.filter(Boolean); // Filter out any failed loads
  } catch (error) {
    console.error("Error in loadArticles:", error);
    return [];
  }
}

/**
 * Fetches a single article by its ID.
 * @param {string} id - The ID of the article (filename without extension).
 * @returns {Promise<{id: string, ...frontmatter, content: string}|null>}
 */
export async function getArticleById(id) {
  try {
    const response = await fetch(`/src/data/articles/${id}.md`);
    if (!response.ok) {
      throw new Error(`Failed to fetch article with ID: ${id}`);
    }
    const markdown = await response.text();
    const { frontmatter, body } = parseMarkdown(markdown);
    return {
      id,
      ...frontmatter,
      content: body,
    };
  } catch (error) {
    console.error(`Error loading article ${id}:`, error);
    return null;
  }
}

/**
 * Fetches and parses all blog posts.
 * @returns {Promise<Array<{id: string, ...frontmatter, content: string}>>}
 */
export async function loadBlogPosts() {
  try {
    const manifestResponse = await fetch("/src/data/blog/blogs-manifest.json");
    if (!manifestResponse.ok) {
      throw new Error("Failed to fetch blog posts manifest file.");
    }
    const manifest = await manifestResponse.json();
    const blogFiles = manifest.files;

    const posts = await Promise.all(
      blogFiles.map(async (fileName) => {
        try {
          const response = await fetch(`/src/data/blog/${fileName}`);
          if (!response.ok) {
            throw new Error(`Failed to fetch blog post: ${fileName}`);
          }
          const markdown = await response.text();
          const { frontmatter, body } = parseMarkdown(markdown);
          return {
            id: fileName.replace(".md", ""),
            ...frontmatter,
            content: body,
          };
        } catch (error) {
          console.error(`Error loading blog post ${fileName}:`, error);
          return null;
        }
      })
    );
    return posts.filter(Boolean);
  } catch (error) {
    console.error("Error in loadBlogPosts:", error);
    return [];
  }
}

/**
 * Fetches and parses all books.
 * @returns {Promise<Array<{id: string, ...frontmatter, content: string}>>}
 */
export async function loadBooks() {
  try {
    const manifestResponse = await fetch("/src/data/books/books-manifest.json");
    if (!manifestResponse.ok) {
      throw new Error("Failed to fetch books manifest file.");
    }
    const manifest = await manifestResponse.json();
    const bookFiles = manifest.files;

    const books = await Promise.all(
      bookFiles.map(async (fileName) => {
        try {
          const response = await fetch(`/src/data/books/${fileName}`);
          if (!response.ok) {
            throw new Error(`Failed to fetch book: ${fileName}`);
          }
          const markdown = await response.text();
          const { frontmatter, body } = parseMarkdown(markdown);
          return {
            id: fileName.replace(".md", ""),
            ...frontmatter,
            content: body,
          };
        } catch (error) {
          console.error(`Error loading book ${fileName}:`, error);
          return null;
        }
      })
    );
    return books.filter(Boolean);
  } catch (error) {
    console.error("Error in loadBooks:", error);
    return [];
  }
}
